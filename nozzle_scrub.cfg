#######################################################################################################################################
##                 Nozzle clean and wipe
#######################################################################################################################################

[gcode_macro clean_nozzle]

gcode:
# First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}

    {% set bucket_x = printer["gcode_macro _USER_VARIABLE"].bucket_x %}
    {% set bucket_y = printer["gcode_macro _USER_VARIABLE"].bucket_y %}
    {% set brush_top = printer["gcode_macro _USER_VARIABLE"].brush_top %}
    {% set clearance_z = printer["gcode_macro _USER_VARIABLE"].clearance_z %}
    {% set wipe_qty = printer["gcode_macro _USER_VARIABLE"].wipe_qty %}
    {% set prep_spd_xy = printer["gcode_macro _USER_VARIABLE"].prep_spd_xy %}
    {% set prep_spd_z = printer["gcode_macro _USER_VARIABLE"].prep_spd_z %}
    {% set wipe_spd_xy = printer["gcode_macro _USER_VARIABLE"].wipe_spd_xy %}
    {% set brush_start = printer["gcode_macro _USER_VARIABLE"].brush_start %}
    {% set brush_width = printer["gcode_macro _USER_VARIABLE"].brush_width %}
    {% set brush_front = printer["gcode_macro _USER_VARIABLE"].brush_front %}
    {% set brush_depth = printer["gcode_macro _USER_VARIABLE"].brush_depth %}
    {% set bucket_purge_x = printer["gcode_macro _USER_VARIABLE"].bucket_purge_x %}

    {% set purge_spd = printer["gcode_macro _USER_VARIABLE"].purge_spd %}
    {% set purge_temp_min = printer["gcode_macro _USER_VARIABLE"].purge_temp_min %}
    {% set purge_ret = printer["gcode_macro _USER_VARIABLE"].purge_ret %}


      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 Y{bucket_y + brush_front + (brush_depth / 2)} F{prep_spd_xy}
      G1 X{bucket_x + brush_start + brush_width} F{prep_spd_xy}
      
           G90
           ## Move nozzle down into brush.
           G1 Z{brush_top} F{prep_spd_z}
   
           ## clean dann 15s pause und nochmal clean
           {% for wipes in range(1, (wipe_qty + 1)) %}
              G1 X{bucket_x + brush_start + brush_width} Y{bucket_y + brush_front + ((brush_depth / 2)+5)} F{wipe_spd_xy}
              G1 X{bucket_x + brush_start} Y{bucket_y + brush_front + ((brush_depth / 2)-5)} F{wipe_spd_xy}
           {% endfor %}
 
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}



[gcode_macro purge_nozzle]

gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
 
    {% set brush_top = printer["gcode_macro _USER_VARIABLE"].brush_top %}
    {% set clearance_z = printer["gcode_macro _USER_VARIABLE"].clearance_z %}
    {% set prep_spd_xy = printer["gcode_macro _USER_VARIABLE"].prep_spd_xy %}
    {% set prep_spd_z = printer["gcode_macro _USER_VARIABLE"].prep_spd_z %}
    {% set bucket_width = printer["gcode_macro _USER_VARIABLE"].bucket_width %}
    {% set brush_front = printer["gcode_macro _USER_VARIABLE"].brush_front %}
    {% set brush_depth = printer["gcode_macro _USER_VARIABLE"].brush_depth %}
    {% set bucket_x = printer["gcode_macro _USER_VARIABLE"].bucket_x %}
    {% set bucket_y = printer["gcode_macro _USER_VARIABLE"].bucket_y %}
    {% set bucket_purge_x = printer["gcode_macro _USER_VARIABLE"].bucket_purge_x %}

    {% set purge_len = printer["gcode_macro _USER_VARIABLE"].purge_len %}
    {% set purge_spd = printer["gcode_macro _USER_VARIABLE"].purge_spd %}
    {% set purge_temp_min = printer["gcode_macro _USER_VARIABLE"].purge_temp_min %}
    {% set purge_ret = printer["gcode_macro _USER_VARIABLE"].purge_ret %}
    {% set ooze_dwell = printer["gcode_macro _USER_VARIABLE"].ooze_dwell %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=wipe_nozzle

      ## Set to absolute positioning.
      G90

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}
         G1 Y{bucket_y + brush_front + (brush_depth / 2)} F{prep_spd_xy}
         G1 X{bucket_x + bucket_purge_x} F{prep_spd_xy} 

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 36}
            G4 S{ooze_dwell}
            G92 E0   ; reset extruder
          
         {% else %}

           ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
           { action_raise_error("Temperature to low") }
           M117 Temperature to low!

         {% endif %}

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=wipe_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}


